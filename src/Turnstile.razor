@using System.Threading;
@using Soenneker.Blazor.Turnstile.Abstract;
@using Microsoft.Extensions.Logging;
@using Microsoft.JSInterop;
@using Soenneker.Blazor.Extensions.EventCallback;
@using Soenneker.Blazor.Turnstile.Options;
@using Soenneker.Extensions.Task;
@using Soenneker.Extensions.ValueTask;
@using Soenneker.Extensions.CancellationTokens;

@inherits Soenneker.Quark.Components.Cancellable.CancellableComponent
@implements ITurnstile
@inject ITurnstileInterop TurnstileInterop
@inject ILogger<Turnstile> Logger

<div id="@_elementId" class="cf-turnstile" @attributes="Attributes" ></div>

@code {

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object?>? Attributes { get; set; }

    private DotNetObjectReference<Turnstile>? _objRef;
    private readonly string _elementId;

    private bool _shouldRender = true;
    private bool _isCreated;

    [Parameter]
    public TurnstileOptions? Options { get; set; }

    [Parameter]
    public string? SiteKey { get; set; }

    [Parameter]
    public EventCallback<string> TokenChanged { get; set; }

    [Parameter]
    public EventCallback<string> OnCallback { get; set; }

    [Parameter]
    public EventCallback<string> OnExpiredCallback { get; set; }

    [Parameter]
    public EventCallback<string> OnErrorCallback { get; set; }

    public string? WidgetId { get; private set; }
    public string? Token { get; private set; }
    private bool _initialized;

    public Turnstile()
    {
        _elementId = $"turnstile-{Guid.NewGuid()}";
    }

    protected override bool ShouldRender() => _shouldRender;

    protected override void OnInitialized() => _objRef = DotNetObjectReference.Create(this);

    protected override Task OnInitializedAsync()
    {
        return InitializeTurnstileInterop(CancellationToken);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_isCreated)
        {
            await CreateWidget(CancellationToken).NoSync();
        }
    }

    private async Task InitializeTurnstileInterop(CancellationToken cancellationToken)
    {
        if (!_isCreated)
        {
            await TurnstileInterop.Initialize(cancellationToken).NoSync();
        }
    }

    private async ValueTask CreateWidget(CancellationToken cancellationToken)
    {
        try
        {
            if (Options?.ManualCreate == true)
                return;

            WidgetId = await Create(cancellationToken: cancellationToken).NoSync();

            if (WidgetId != null)
                await TurnstileInterop.CreateObserver(_elementId, WidgetId, cancellationToken).NoSync();

            _shouldRender = false;
            _isCreated = true;
        }
        catch (Exception ex)
        {
            Logger.LogError("Error during Turnstile initialization: {Exception}", ex);
        }
    }

    public async ValueTask<string?> Create(TurnstileOptions? options = null, CancellationToken cancellationToken = default)
    {
        Logger.LogDebug("Initializing Cloudflare Turnstile...");

        if (_initialized)
        {
            Logger.LogWarning("Turnstile 'Create' was called multiple times without destroying the instance first.");
            return null;
        }

        _initialized = true;

        Options ??= options ?? new TurnstileOptions();
        if (SiteKey != null)
            Options.SiteKey = SiteKey;

        if (Options.SiteKey == null)
        {
            Logger.LogError("Turnstile 'Create' requires a 'SiteKey' to be set in the options");
            return null;
        }

        var internalOptions = new InternalTurnstileOptions
        {
            CallbackEventEnabled = OnCallback.HasDelegate,
            OnErrorEventEnabled = OnErrorCallback.HasDelegate,
            OnExpiredEventEnabled = OnExpiredCallback.HasDelegate
        };

        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            return await TurnstileInterop.Create(_objRef!, _elementId, Options, internalOptions, linked).NoSync();
    }

    public async ValueTask Reset(CancellationToken cancellationToken = default)
    {
        if (WidgetId == null)
        {
            Logger.LogError("Turnstile 'Reset' cannot be called as it appears there was an error initializing");
            return;
        }

        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            await TurnstileInterop.Reset(WidgetId, linked).NoSync();
    }

    public async ValueTask Remove(CancellationToken cancellationToken = default)
    {
        if (WidgetId == null)
        {
            Logger.LogError("Turnstile 'Remove' cannot be called as it appears there was an error initializing");
            return;
        }

        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            await TurnstileInterop.Remove(WidgetId, linked).NoSync();
    }


    [JSInvokable]
    public Task Callback(string token)
    {
        Token = token;
        return NotifyTokenChangedAsync(token);
    }

    [JSInvokable]
    public async Task ErrorCallback(string message)
    {
        Logger.LogError("Turnstile error: {Message}", message);
        Token = null;
        await NotifyTokenChangedAsync(Token).NoSync();
        await OnErrorCallback.InvokeIfHasDelegate(message).NoSync();
    }

    [JSInvokable]
    public async Task ExpiredCallback(string message)
    {
        Logger.LogError("Turnstile token has expired");
        Token = null;
        await NotifyTokenChangedAsync(Token).NoSync();
        await OnExpiredCallback.InvokeIfHasDelegate(message).NoSync();
    }

    private async Task NotifyTokenChangedAsync(string? token)
    {
        await TokenChanged.InvokeIfHasDelegate(token).NoSync();
        await OnCallback.InvokeIfHasDelegate(token).NoSync();
    }

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync().NoSync();

        WidgetId = null;

        _initialized = false;
        _isCreated = false;

        _objRef?.Dispose();
    }

}